import{createElementBlock as e,openBlock as t,createElementVNode as n,withDirectives as r,toDisplayString as i,vModelSelect as s,Fragment as a,renderList as o,normalizeStyle as l,normalizeClass as c,createVNode as u,createApp as d}from"https://unpkg.com/vue@3/dist/vue.esm-browser.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class h{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(e,t,n={}){if("string"==typeof e&&e.length<1||e instanceof String&&e.length<1||"string"!=typeof e&&!(e instanceof String)&&e!==h.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if("function"!=typeof t)throw new TypeError("The callback must be a function.");const r=new p(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){if(void 0===e)return!!(this.eventMap[h.ANY_EVENT]&&this.eventMap[h.ANY_EVENT].length>0)||Object.entries(this.eventMap).some((([,e])=>e.length>0));if(this.eventMap[e]&&this.eventMap[e].length>0){if(t instanceof p){return this.eventMap[e].filter((e=>e===t)).length>0}if("function"==typeof t){return this.eventMap[e].filter((e=>e.callback===t)).length>0}return null==t}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach((e=>{e.suspended=!0}))}unsuspendEvent(e){this.getListeners(e).forEach((e=>{e.suspended=!1}))}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if("string"!=typeof e&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[h.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach((e=>{if(e.suspended)return;let r=[...t];Array.isArray(e.arguments)&&(r=r.concat(e.arguments)),e.remaining>0&&(n.push(e.callback.apply(e.context,r)),e.count++),--e.remaining<1&&e.remove()})),n}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter((e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context));r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise(((n,r)=>{let i,s=this.addListener(e,(()=>{clearTimeout(i),n()}),{remaining:1});t.duration!==1/0&&(i=setTimeout((()=>{s.remove(),r("The duration expired before the event was emitted.")}),t.duration))}))}get eventCount(){return Object.keys(this.eventMap).length}}class p{constructor(e,t,n,r={}){if("string"!=typeof e&&!(e instanceof String)&&e!==h.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if("function"!=typeof n)throw new TypeError("The 'callback' must be a function.");void 0===r.arguments||Array.isArray(r.arguments)||(r.arguments=[r.arguments]),(r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r)).duration!==1/0&&setTimeout((()=>this.remove()),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}
/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class m{static get MIDI_CHANNEL_MESSAGES(){return this.validation,m.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation,m.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation,{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation,m.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation,m.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}
/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class f{constructor(e,t={}){this.duration=w.defaults.note.duration,this.attack=w.defaults.note.attack,this.release=w.defaults.note.release,null!=t.duration&&(this.duration=t.duration),null!=t.attack&&(this.attack=t.attack),null!=t.rawAttack&&(this.attack=g.from7bitToFloat(t.rawAttack)),null!=t.release&&(this.release=t.release),null!=t.rawRelease&&(this.release=g.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=g.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=g.getNoteDetails(e);if(w.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(w.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(w.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(w.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(w.validation&&(e=parseFloat(e),isNaN(e)||null===e||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(w.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(w.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return g.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=g.from7bitToFloat(e)}get rawRelease(){return g.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=g.from7bitToFloat(e)}get number(){return g.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return w.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+12*e+t,0),127)}}
/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class g{
/**
   * Returns a MIDI note number matching the identifier passed in the form of a string. The
   * identifier must include the octave number. The identifier also optionally include a sharp (#),
   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid
   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.
   *
   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number
   * 60) as per the scientific pitch notation standard.
   *
   * The resulting note number can be offset by using the `octaveOffset` parameter.
   *
   * @param identifier {string} The identifier in the form of a letter, followed by an optional "#",
   * "##", "b" or "bb" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,
   * Abb4, B##6, etc.
   *
   * @param {number} [octaveOffset=0] A integer to offset the octave by.
   *
   * @returns {number} The MIDI note number (an integer between 0 and 127).
   *
   * @throws RangeError Invalid 'octaveOffset' value
   *
   * @throws TypeError Invalid note identifier
   *
   * @license Apache-2.0
   * @since 3.0.0
   * @static
   */
static toNoteNumber(e,t=0){if(t=null==t?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");"string"!=typeof e&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");let r=12*(n.octave+1+t);if(r+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n.name],n.accidental&&(n.accidental.startsWith("b")?r-=n.accidental.length:r+=n.accidental.length),r<0||r>127)throw new RangeError("Invalid octaveOffset value");return r}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let i=t[2].toLowerCase();i=""===i?void 0:i;return{accidental:i,identifier:n+(i||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(w.validation)if("all"===e)t=["all"];else if("none"===e)return[];return t=Array.isArray(e)?e:[e],t.indexOf("all")>-1&&(t=m.MIDI_CHANNEL_NUMBERS),t.map((function(e){return parseInt(e)})).filter((function(e){return e>=1&&e<=16}))}static toTimestamp(e){let t=!1;const n=parseFloat(e);return!isNaN(n)&&("string"==typeof e&&"+"===e.substring(0,1)?n>=0&&(t=w.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if("string"==typeof e||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch(r){return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=null==t?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=Math.floor(e/12-1)+t;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][e%12]+n.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof f)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(!1===n)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new f(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach((e=>{n.push(this.buildNote(e,t))})),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(127*e),0),127)}static fromMsbLsbToFloat(e,t=0){w.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){w.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(16383*e);return{msb:t>>7,lsb:127&t}}static offsetNumber(e,t=0,n=0){if(w.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+12*t+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find((n=>e[n]===t))}static getCcNameByNumber(e){if(!w.validation||(e=parseInt(e))>=0&&e<=127)return m.CONTROL_CHANGE_MESSAGES[e].name}static getCcNumberByName(e){let t=m.CONTROL_CHANGE_MESSAGES.find((t=>t.name===e));return t?t.number:m.MIDI_CONTROL_CHANGE_MESSAGES[e]}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in m.CHANNEL_MODE_MESSAGES)if(m.CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===m.CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return"undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node}static get isBrowser(){return"undefined"!=typeof window&&void 0!==window.document}}
/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class b extends h{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(w.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=g.fromFloatTo7Bit(t));const r=w.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),g.buildNoteArray(e).forEach((e=>{this.send([(m.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),e.getOffsetNumber(r),t],{time:g.toTimestamp(n.time)})})),this}
/**
   * Sends a MIDI **control change** message to the channel at the scheduled time. The control
   * change message to send can be specified numerically (`0` to `127`) or by using one of the
   * following common names:
   *
   * | Number | Name                          |
   * |--------|-------------------------------|
   * | 0      |`bankselectcoarse`             |
   * | 1      |`modulationwheelcoarse`        |
   * | 2      |`breathcontrollercoarse`       |
   * | 4      |`footcontrollercoarse`         |
   * | 5      |`portamentotimecoarse`         |
   * | 6      |`dataentrycoarse`              |
   * | 7      |`volumecoarse`                 |
   * | 8      |`balancecoarse`                |
   * | 10     |`pancoarse`                    |
   * | 11     |`expressioncoarse`             |
   * | 12     |`effectcontrol1coarse`         |
   * | 13     |`effectcontrol2coarse`         |
   * | 18     |`generalpurposeslider3`        |
   * | 19     |`generalpurposeslider4`        |
   * | 32     |`bankselectfine`               |
   * | 33     |`modulationwheelfine`          |
   * | 34     |`breathcontrollerfine`         |
   * | 36     |`footcontrollerfine`           |
   * | 37     |`portamentotimefine`           |
   * | 38     |`dataentryfine`                |
   * | 39     |`volumefine`                   |
   * | 40     |`balancefine`                  |
   * | 42     |`panfine`                      |
   * | 43     |`expressionfine`               |
   * | 44     |`effectcontrol1fine`           |
   * | 45     |`effectcontrol2fine`           |
   * | 64     |`holdpedal`                    |
   * | 65     |`portamento`                   |
   * | 66     |`sustenutopedal`               |
   * | 67     |`softpedal`                    |
   * | 68     |`legatopedal`                  |
   * | 69     |`hold2pedal`                   |
   * | 70     |`soundvariation`               |
   * | 71     |`resonance`                    |
   * | 72     |`soundreleasetime`             |
   * | 73     |`soundattacktime`              |
   * | 74     |`brightness`                   |
   * | 75     |`soundcontrol6`                |
   * | 76     |`soundcontrol7`                |
   * | 77     |`soundcontrol8`                |
   * | 78     |`soundcontrol9`                |
   * | 79     |`soundcontrol10`               |
   * | 80     |`generalpurposebutton1`        |
   * | 81     |`generalpurposebutton2`        |
   * | 82     |`generalpurposebutton3`        |
   * | 83     |`generalpurposebutton4`        |
   * | 91     |`reverblevel`                  |
   * | 92     |`tremololevel`                 |
   * | 93     |`choruslevel`                  |
   * | 94     |`celestelevel`                 |
   * | 95     |`phaserlevel`                  |
   * | 96     |`dataincrement`                |
   * | 97     |`datadecrement`                |
   * | 98     |`nonregisteredparametercoarse` |
   * | 99     |`nonregisteredparameterfine`   |
   * | 100    |`registeredparametercoarse`    |
   * | 101    |`registeredparameterfine`      |
   * | 120    |`allsoundoff`                  |
   * | 121    |`resetallcontrollers`          |
   * | 122    |`localcontrol`                 |
   * | 123    |`allnotesoff`                  |
   * | 124    |`omnimodeoff`                  |
   * | 125    |`omnimodeon`                   |
   * | 126    |`monomodeon`                   |
   * | 127    |`polymodeon`                   |
   *
   * As you can see above, not all control change message have a matching name. This does not mean
   * you cannot use the others. It simply means you will need to use their number
   * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are
   * usually reserved for *channel mode* messages. See
   * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.
   *
   * To view a detailed list of all available **control change** messages, please consult "Table 3 -
   * Control Change Messages" from the [MIDI Messages](
   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)
   * specification.
   *
   * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1
   * (`modulationwheelcoarse`) can be accompanied by a second control change message for
   * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB
   * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the
   * second parameter.
   *
   * @param {number|string} controller The MIDI controller name or number (`0` - `127`).
   *
   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array
   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second
   * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first
   * controller)
   *
   * @param {object} [options={}]
   *
   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
   * followed by a number, the message will be delayed by that many milliseconds. If the value is a
   * positive number
   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
   * the operation will be scheduled for that time. The current time can be retrieved with
   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
   * operation will be carried out as soon as possible.
   *
   * @throws {RangeError} Controller numbers must be between 0 and 127.
   * @throws {RangeError} Invalid controller name.
   * @throws {TypeError} The value array must have a length of 2.
   *
   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */sendControlChange(e,t,n={}){if("string"==typeof e&&(e=g.getCcNumberByName(e)),Array.isArray(t)||(t=[t]),w.validation){if(void 0===e)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(2===(t=t.map((e=>{const t=Math.min(Math.max(parseInt(e),0),127);if(isNaN(t))throw new TypeError("Values must be integers between 0 and 127");return t}))).length&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach(((r,i)=>{this.send([(m.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+32*i,t[i]],{time:g.toTimestamp(n.time)})})),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2||this.sendControlChange(38,e[1],t),this}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=m.REGISTERED_PARAMETERS[e]),w.validation){if(void 0===e)throw new TypeError("The specified registered parameter is invalid.");let t=!1;if(Object.getOwnPropertyNames(m.REGISTERED_PARAMETERS).forEach((n=>{m.REGISTERED_PARAMETERS[n][0]===e[0]&&m.REGISTERED_PARAMETERS[n][1]===e[1]&&(t=!0)})),!t)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=m.REGISTERED_PARAMETERS[e]),w.validation){if(void 0===e)throw new TypeError("The specified registered parameter is invalid.");let t=!1;if(Object.getOwnPropertyNames(m.REGISTERED_PARAMETERS).forEach((n=>{m.REGISTERED_PARAMETERS[n][0]===e[0]&&m.REGISTERED_PARAMETERS[n][1]===e[1]&&(t=!0)})),!t)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){this.sendNoteOn(e,t);const n=Array.isArray(e)?e:[e];for(let r of n)if(parseInt(r.duration)>0){const e={time:(g.toTimestamp(t.time)||w.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,e)}else if(parseInt(t.duration)>0){const e={time:(g.toTimestamp(t.time)||w.time)+parseInt(t.duration),release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(r,e)}return this}sendNoteOff(e,t={}){if(w.validation){if(null!=t.rawRelease&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(null!=t.release&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity),t.velocity&&(t.release=t.velocity)}let n=64;null!=t.rawRelease?n=t.rawRelease:isNaN(t.release)||(n=Math.round(127*t.release));const r=w.octaveOffset+this.output.octaveOffset+this.octaveOffset;return g.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach((e=>{this.send([(m.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),e.getOffsetNumber(r),e.rawRelease],{time:g.toTimestamp(t.time)})})),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(w.validation){if(null!=t.rawAttack&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(null!=t.attack&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release),t.velocity&&(t.attack=t.velocity)}let n=64;null!=t.rawAttack?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(127*t.attack));const r=w.octaveOffset+this.output.octaveOffset+this.octaveOffset;return g.buildNoteArray(e,{rawAttack:n}).forEach((e=>{this.send([(m.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),e.getOffsetNumber(r),e.rawAttack],{time:g.toTimestamp(t.time)})})),this}sendChannelMode(e,t=0,n={}){if("string"==typeof e&&(e=m.CHANNEL_MODE_MESSAGES[e]),w.validation){if(void 0===e)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(m.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:g.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return void 0===e||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(w.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return t.rawValue||(e=g.fromFloatTo7Bit(e)),this.send([(m.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(e)],{time:g.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,w.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let i=r>>7&127,s=127&r;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[i,s],t),this}sendModulationRange(e,t,n={}){if(w.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(null==t||Number.isInteger(t)&&t>=0&&t<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),w.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach((e=>{if(!(e>=0&&e<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")}))}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(w.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||null===e)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const t=g.fromFloatToMsbLsb((e+1)/2);n=t.msb,r=t.lsb}return this.send([(m.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:g.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(w.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,w.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(m.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:g.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=m.REGISTERED_PARAMETERS[e]),w.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach((e=>{if(!(e>=0&&e<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")}))}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(w.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(w.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return"mono"===e?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}
/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class y extends h{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new b(this,t);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach((e=>e.destroy())),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:w.time};"open"===e.port.connection?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):"closed"===e.port.connection&&"connected"===e.port.state?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):"closed"===e.port.connection&&"disconnected"===e.port.state?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):"pending"===e.port.connection&&e.port.state}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}
/**
   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be
   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a
   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}
   * object or a [`Message`](Message) object.
   *
   * It is usually not necessary to use this method directly as you can use one of the simpler
   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),
   * [`sendControlChange()`](#sendControlChange), etc.
   *
   * Details on the format of MIDI messages are available in the summary of
   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}
   * from the MIDI Manufacturers Association.
   *
   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`
   * object (not available in Node.js) containing the message bytes or a `Message` object.
   *
   * @param {object} [options={}]
   *
   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
   * followed by a number, the message will be delayed by that many milliseconds. If the value is a
   * positive number
   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
   * the operation will be scheduled for that time. The current time can be retrieved with
   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
   * operation will be carried out as soon as possible.
   *
   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.
   *
   * @returns {Output} Returns the `Output` object so methods can be chained.
   *
   * @license Apache-2.0
   */send(e,t={time:0},n=0){if(e instanceof N&&(e=g.isNode?e.data:e.rawData),e instanceof Uint8Array&&g.isNode&&(e=Array.from(e)),w.validation){if(Array.isArray(e)||e instanceof Uint8Array||(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach((e=>{if(!((e=parseInt(e))>=0&&e<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")})),t||(t={time:0})}return this._midiOutput.send(e,g.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=m.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=m.SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,m.SYSTEM_MESSAGES.sysexend);this.send([m.SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():w.validation,this}sendTimecodeQuarterFrame(e,t={}){if(w.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([m.SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){var n=(e=Math.floor(e)||0)>>7&127,r=127&e;return this.send([m.SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(w.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([m.SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([m.SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([m.SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([m.SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([m.SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([m.SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([m.SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([m.SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return w.validation,this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendKeyAftertouch(e,t,n)})),this}sendControlChange(e,t,n={},r={}){if(w.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){const e=n;(n=r).channels=e,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)}return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendControlChange(e,t,n)})),this}sendPitchBendRange(e=0,t=0,n={}){return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendPitchBendRange(e,t,n)})),this}setPitchBendRange(e=0,t=0,n="all",r={}){return w.validation&&(r.channels=n,"all"===r.channels&&(r.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendRpnValue(e,t,n)})),this}setRegisteredParameter(e,t=[],n="all",r={}){return w.validation&&(r.channels=n,"all"===r.channels&&(r.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendChannelAftertouch(e,t)})),this}sendPitchBend(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendPitchBend(e,t)})),this}sendProgramChange(e=0,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendProgramChange(e,t)})),this}sendModulationRange(e,t,n={}){return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendModulationRange(e,t,n)})),this}setModulationRange(e=0,t=0,n="all",r={}){return w.validation&&(r.channels=n,"all"===r.channels&&(r.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendMasterTuning(e,t)})),this}setMasterTuning(e,t={},n={}){return w.validation&&(n.channels=t,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendTuningProgram(e,t)})),this}setTuningProgram(e,t="all",n={}){return w.validation&&(n.channels=t,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendTuningBank(e,t)})),this}setTuningBank(e,t="all",n={}){return w.validation&&(n.channels=t,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(w.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){const e=n;(n=r).channels=e,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)}return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendChannelMode(e,t,n)})),this}sendAllSoundOff(e={}){return null==e.channels&&(e.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(e.channels).forEach((t=>{this.channels[t].sendAllSoundOff(e)})),this}sendAllNotesOff(e={}){return null==e.channels&&(e.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(e.channels).forEach((t=>{this.channels[t].sendAllNotesOff(e)})),this}sendResetAllControllers(e={},t={}){if(w.validation&&(Array.isArray(e)||Number.isInteger(e)||"all"===e)){const n=e;(e=t).channels=n,"all"===e.channels&&(e.channels=m.MIDI_CHANNEL_NUMBERS)}return null==e.channels&&(e.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(e.channels).forEach((t=>{this.channels[t].sendResetAllControllers(e)})),this}sendPolyphonicMode(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendPolyphonicMode(e,t)})),this}sendLocalControl(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendLocalControl(e,t)})),this}sendOmniMode(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendOmniMode(e,t)})),this}sendNrpnValue(e,t,n={}){return null==n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendNrpnValue(e,t,n)})),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return w.validation&&(r.channels=n,"all"===r.channels&&(r.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendRpnIncrement(e,t)})),this}incrementRegisteredParameter(e,t="all",n={}){return w.validation&&(n.channels=t,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendRpnDecrement(e,t)})),this}decrementRegisteredParameter(e,t="all",n={}){return w.validation&&(n.channels=t,"all"===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendNoteOff(e,t)})),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(w.validation&&(t.rawVelocity,t.velocity,Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].playNote(e,t)})),this}sendNoteOn(e,t={},n={}){if(w.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendNoteOn(e,t)})),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}
/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class E{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(m.SYSTEM_MESSAGES),...Object.keys(m.CHANNEL_MESSAGES)],this.channels=m.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),w.validation&&(e.forEach((e=>{if(!(e instanceof y))throw new TypeError("Destinations must be of type 'Output'.")})),void 0!==t.types&&t.types.forEach((e=>{if(!m.SYSTEM_MESSAGES.hasOwnProperty(e)&&!m.CHANNEL_MESSAGES.hasOwnProperty(e))throw new TypeError("Type must be a valid message type.")})),void 0!==t.channels&&t.channels.forEach((e=>{if(!m.MIDI_CHANNEL_NUMBERS.includes(e))throw new TypeError("MIDI channel must be between 1 and 16.")}))),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach((t=>{(!w.validation||t instanceof y)&&t.send(e)})))}}
/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class v extends h{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if("noteoff"===t.type||"noteon"===t.type&&0===r)this.notesState[n]=!1,t.type="noteoff",t.note=new f(g.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+w.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=g.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if("noteon"===t.type)this.notesState[n]=!0,t.note=new f(g.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+w.octaveOffset),{rawAttack:r}),t.value=g.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if("keyaftertouch"===t.type)t.note=new f(g.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+w.octaveOffset)),t.value=g.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if("controlchange"===t.type){t.controller={number:n,name:m.CONTROL_CHANGE_MESSAGES[n].name,description:m.CONTROL_CHANGE_MESSAGES[n].description,position:m.CONTROL_CHANGE_MESSAGES[n].position},t.subtype=t.controller.name||"controller"+n,t.value=g.from7bitToFloat(r),t.rawValue=r;const e=Object.assign({},t);e.type=`${t.type}-controller${n}`,delete e.subtype,this.emit(e.type,e);const i=Object.assign({},t);i.type=`${t.type}-`+m.CONTROL_CHANGE_MESSAGES[n].name,delete i.subtype,0!==i.type.indexOf("controller")&&this.emit(i.type,i),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else"programchange"===t.type?(t.value=n,t.rawValue=t.value):"channelaftertouch"===t.type?(t.value=g.from7bitToFloat(n),t.rawValue=n):"pitchbend"===t.type?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,"localcontrol"===t.type&&(t.value=127===t.message.data[2],t.rawValue=t.message.data[2]),"omnimodeon"===t.type?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):"omnimodeoff"===t.type&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),"monomodeon"===t.type?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):"polymodeon"===t.type&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1];99===t||101===t?(this._nrpnBuffer=[],this._rpnBuffer=[],99===t?this._nrpnBuffer=[e.message]:127!==n&&(this._rpnBuffer=[e.message])):98===t||100===t?98===t?(this._rpnBuffer=[],1===this._nrpnBuffer.length?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],1===this._rpnBuffer.length&&127!==n?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):6!==t&&38!==t&&96!==t&&97!==t||(2===this._rpnBuffer.length?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):2===this._nrpnBuffer.length?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return 6===e||38===e||96===e||97===e||98===e||99===e||100===e||101===e}_dispatchParameterNumberEvent(e,t,n,r){e="nrpn"===e?"nrpn":"rpn";const i={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:g.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};i.parameter="rpn"===e?Object.keys(m.REGISTERED_PARAMETERS).find((e=>m.REGISTERED_PARAMETERS[e][0]===t&&m.REGISTERED_PARAMETERS[e][1]===n)):(t<<7)+n;const s=m.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;i.type=`${e}-${s}`,this.emit(i.type,i);const a=Object.assign({},i);"nrpn-dataincrement"===a.type?a.type="nrpn-databuttonincrement":"nrpn-datadecrement"===a.type?a.type="nrpn-databuttondecrement":"rpn-dataincrement"===a.type?a.type="rpn-databuttonincrement":"rpn-datadecrement"===a.type&&(a.type="rpn-databuttondecrement"),this.emit(a.type,a),i.type=e,i.subtype=s,this.emit(i.type,i)}getChannelModeByNumber(e){return w.validation&&(e=Math.floor(e)),g.getChannelModeByNumber(e)}getCcNameByNumber(e){if(w.validation&&!((e=parseInt(e))>=0&&e<=127))throw new RangeError("Invalid control change number.");return g.getCcNameByNumber(e)}getNoteState(e){e instanceof f&&(e=e.identifier);const t=g.guessNoteNumber(e,w.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}
/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class N{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=g.getPropertyByValue(m.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=g.getPropertyByValue(m.SYSTEM_MESSAGES,this.command)),this.statusByte===m.SYSTEM_MESSAGES.sysex&&(0===this.dataBytes[0]?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}
/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class _ extends h{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new v(this,t);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach((e=>e.destroy())),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:w.time,target:this,port:this};"open"===e.port.connection?(t.type="opened",this.emit("opened",t)):"closed"===e.port.connection&&"connected"===e.port.state?(t.type="closed",this.emit("closed",t)):"closed"===e.port.connection&&"disconnected"===e.port.state?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):"pending"===e.port.connection&&e.port.state}_onMidiMessage(e){const t=new N(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach((e=>e.forward(t)))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage","songselect"===t.type&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){w.validation}addListener(e,t,n={}){if(w.validation&&"function"==typeof n){let e=null!=t?[].concat(t):void 0;t=n,n={channels:e}}if(m.CHANNEL_EVENTS.includes(e)){void 0===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS);let r=[];return g.sanitizeChannels(n.channels).forEach((i=>{r.push(this.channels[i].addListener(e,t,n))})),r}return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(w.validation&&"function"==typeof n){let e=[].concat(t);t=n,n={channels:e}}return m.CHANNEL_EVENTS.includes(e)?(void 0===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),g.sanitizeChannels(n.channels).every((n=>this.channels[n].hasListener(e,t)))):super.hasListener(e,t)}removeListener(e,t,n={}){if(w.validation&&"function"==typeof n){let e=[].concat(t);t=n,n={channels:e}}if(void 0===n.channels&&(n.channels=m.MIDI_CHANNEL_NUMBERS),null==e)return g.sanitizeChannels(n.channels).forEach((e=>{this.channels[e]&&this.channels[e].removeListener()})),super.removeListener();m.CHANNEL_EVENTS.includes(e)?g.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].removeListener(e,t,n)})):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return n=e instanceof E?e:new E(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter((t=>t!==e))}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return w.validation,!1}}
/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */const w=new class extends h{constructor(){super(),this.defaults={note:{attack:g.from7bitToFloat(64),release:g.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(g.isNode){try{window.navigator}catch(s){let e=await Object.getPrototypeOf((async function(){})).constructor('\n        let jzz = await import("jzz");\n        return jzz.default;\n        ')();global.navigator||(global.navigator={}),Object.assign(global.navigator,e)}try{performance}catch(s){global.performance=await Object.getPrototypeOf((async function(){})).constructor('\n        let perf_hooks = await import("perf_hooks");\n        return perf_hooks.performance;\n        ')()}}if(this.validation=!1!==e.validation,this.validation&&("function"==typeof e&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return"function"==typeof e.callback&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},i={timestamp:this.time,target:this,type:"enabled"};try{"function"==typeof e.requestMIDIAccessFunction?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(s){return n.error=s,this.emit("error",n),"function"==typeof e.callback&&e.callback(s),Promise.reject(s)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(s){return n.error=s,this.emit("error",n),"function"==typeof e.callback&&e.callback(s),Promise.reject(s)}return this.emit("enabled",i),"function"==typeof e.callback&&e.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then((()=>{navigator&&"function"==typeof navigator.close&&navigator.close(),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()}))}getInputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(this._disconnectedInputs[n].id===e.toString())return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(this.inputs[n].id===e.toString())return this.inputs[n]}getInputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(~this._disconnectedInputs[n].name.indexOf(e))return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(~this.inputs[n].name.indexOf(e))return this.inputs[n]}getOutputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(~this._disconnectedOutputs[n].name.indexOf(e))return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(~this.outputs[n].name.indexOf(e))return this.outputs[n]}getOutputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(this._disconnectedOutputs[n].id===e.toString())return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(this.outputs[n].id===e.toString())return this.outputs[n]}noteNameToNumber(e){return this.validation,g.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127&&g.getNoteDetails(g.offsetNumber(e,this.octaveOffset)).octave}sanitizeChannels(e){return this.validation,g.sanitizeChannels(e)}toMIDIChannels(e){return this.validation,g.sanitizeChannels(e)}guessNoteNumber(e){return this.validation,g.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation,g.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation,g.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach((t=>e.push(t.destroy()))),this.outputs.forEach((t=>e.push(t.destroy()))),Promise.all(e).then((()=>{this._inputs=[],this._outputs=[]}))}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state,target:this};if("connected"===e.port.state&&"open"===e.port.connection){"output"===e.port.type?t.port=this.getOutputById(e.port.id):"input"===e.port.type&&(t.port=this.getInputById(e.port.id)),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}else if("disconnected"===e.port.state&&"pending"===e.port.connection){"input"===e.port.type?t.port=this.getInputById(e.port.id,{disconnected:!0}):"output"===e.port.type&&(t.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const e=this._inputs[t];Array.from(this.interface.inputs.values()).find((t=>t===e._midiInput))||(this._disconnectedInputs.push(e),this._inputs.splice(t,1))}let e=[];return this.interface.inputs.forEach((t=>{if(!this._inputs.find((e=>e._midiInput===t))){let n=this._disconnectedInputs.find((e=>e._midiInput===t));n||(n=new _(t)),this._inputs.push(n),e.push(n.open())}})),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const e=this._outputs[t];Array.from(this.interface.outputs.values()).find((t=>t===e._midiOutput))||(this._disconnectedOutputs.push(e),this._outputs.splice(t,1))}let e=[];return this.interface.outputs.forEach((t=>{if(!this._outputs.find((e=>e._midiOutput===t))){let n=this._disconnectedOutputs.find((e=>e._midiOutput===t));n||(n=new y(t)),this._outputs.push(n),e.push(n.open())}})),Promise.all(e)}get enabled(){return null!==this.interface}get inputs(){return this._inputs}get isNode(){return this.validation,g.isNode}get isBrowser(){return this.validation,g.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return"undefined"!=typeof navigator&&!!navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.12"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation,m.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation,m.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation,m.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation,m.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation,m.REGISTERED_PARAMETERS}get NOTES(){return this.validation,["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}};function M(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function S(e){if(Object.prototype.hasOwnProperty.call(e,"__esModule"))return e;var t=e.default;if("function"==typeof t){var n=function e(){return this instanceof e?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach((function(t){var r=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,r.get?r:{enumerable:!0,get:function(){return e[t]}})})),n}w.constructor=null;var A,I,C,R,T,O={exports:{}},B={exports:{}};function D(){return T||(T=1,function(e){var t=I?A:(I=1,A={decode:function(e,t){for(var n,r,i,s=e.replace(/[^A-Za-z0-9\+\/]/g,""),a=s.length,o=t?Math.ceil((3*a+1>>2)/t)*t:3*a+1>>2,l=new Uint8Array(o),c=0,u=0,d=0;d<a;d++)if(r=3&d,c|=((i=s.charCodeAt(d))>64&&i<91?i-65:i>96&&i<123?i-71:i>47&&i<58?i+4:43===i?62:47===i?63:0)<<18-6*r,3===r||a-d===1){for(n=0;n<3&&u<o;n++,u++)l[u]=c>>>(16>>>n&24)&255;c=0}return l}}),n=R?C:(R=1,C=function(e,t){return new Promise((function(n,r){var i=new XMLHttpRequest;t&&(i.responseType=t),i.open("GET",e),i.onload=function(){200===i.status?n(i.response):r(Error(i.statusText))},i.onerror=function(){r(Error("Network Error"))},i.send()}))});function r(e){return function(t){return"string"==typeof t&&e.test(t)}}function i(e,t){return"string"==typeof e?e+t:"function"==typeof e?e(t):t}function s(e,t,n,r){var i=t instanceof ArrayBuffer?a:o(t)?l:function(e){return e&&"function"==typeof e.then}(t)?c:u(t)?d:function(e){return e&&"object"==typeof e}(t)?h:p(t)?m:f(t)?g:b(t)?y:null;return i?i(e,t,n||{}):r?Promise.resolve(r):Promise.reject("Source not valid ("+t+")")}function a(e,t,n){return new Promise((function(n,r){e.decodeAudioData(t,(function(e){n(e)}),(function(){r("Can't decode audio data ("+t.slice(0,30)+"...)")}))}))}s.fetch=n;var o=r(/\.(mp3|wav|ogg)(\?.*)?$/i);function l(e,t,n){var r=i(n.from,t);return s(e,s.fetch(r,"arraybuffer"),n)}function c(e,t,n){return t.then((function(t){return s(e,t,n)}))}var u=Array.isArray;function d(e,t,n){return Promise.all(t.map((function(t){return s(e,t,n,t)})))}function h(e,t,n){var r={},i=Object.keys(t).map((function(i){if(n.only&&-1===n.only.indexOf(i))return null;var a=t[i];return s(e,a,n,a).then((function(e){r[i]=e}))}));return Promise.all(i).then((function(){return r}))}var p=r(/\.json(\?.*)?$/i);function m(e,t,n){var r=i(n.from,t);return s(e,s.fetch(r,"text").then(JSON.parse),n)}var f=r(/^data:audio/);function g(e,n,r){var i=n.indexOf(",");return s(e,t.decode(n.slice(i+1)).buffer,r)}var b=r(/\.js(\?.*)?$/i);function y(e,t,n){var r=i(n.from,t);return s(e,s.fetch(r,"text").then(E),n)}function E(e){var t=e.indexOf("MIDI.Soundfont.");if(t<0)throw Error("Invalid MIDI.js Soundfont format");t=e.indexOf("=",t)+2;var n=e.lastIndexOf(",");return JSON.parse(e.slice(t,n)+"}")}e.exports&&(e.exports=s),"undefined"!=typeof window&&(window.loadAudio=s)}(B)),B.exports}var k,L,P,U,G,x,H,V,F,j,z,Y,q={exports:{}};function K(){if(L)return k;L=1,k=function(r){var i=r.createGain(),s=i._voltage=function(e){var n=e.createBufferSource(),r=e.createBuffer(1,2,e.sampleRate);return r.getChannelData(0).set(t),n.buffer=r,n.loop=!0,n}(r),a=n(s),o=n(s),l=n(s);return i._startAmount=n(o),i._endAmount=n(l),i._multiplier=n(a),i._multiplier.connect(i),i._startAmount.connect(i),i._endAmount.connect(i),i.value=a.gain,i.startValue=o.gain,i.endValue=l.gain,i.startValue.value=0,i.endValue.value=0,Object.defineProperties(i,e),i};var e={attack:{value:0,writable:!0},decay:{value:0,writable:!0},sustain:{value:1,writable:!0},release:{value:0,writable:!0},getReleaseDuration:{value:function(){return this.release}},start:{value:function(e){var t=this._multiplier.gain,n=this._startAmount.gain,i=this._endAmount.gain;this._voltage.start(e),this._decayFrom=this._decayFrom=e+this.attack,this._startedAt=e;var s=this.sustain;t.cancelScheduledValues(e),n.cancelScheduledValues(e),i.cancelScheduledValues(e),i.setValueAtTime(0,e),this.attack?(t.setValueAtTime(0,e),t.linearRampToValueAtTime(1,e+this.attack),n.setValueAtTime(1,e),n.linearRampToValueAtTime(0,e+this.attack)):(t.setValueAtTime(1,e),n.setValueAtTime(0,e)),this.decay&&t.setTargetAtTime(s,this._decayFrom,r(this.decay))}},stop:{value:function(e,t){t&&(e-=this.release);var n=e+this.release;if(this.release){var i=this._multiplier.gain,s=this._startAmount.gain,a=this._endAmount.gain;i.cancelScheduledValues(e),s.cancelScheduledValues(e),a.cancelScheduledValues(e);var o=r(this.release);if(this.attack&&e<this._decayFrom){var l=function(e,t,n,r,i){var s=i-n,a=e+s/(r-n)*(t-e);a<=e&&(a=e);a>=t&&(a=t);return a}(0,1,this._startedAt,this._decayFrom,e);i.linearRampToValueAtTime(l,e),s.linearRampToValueAtTime(1-l,e),s.setTargetAtTime(0,e,o)}a.setTargetAtTime(1,e,o),i.setTargetAtTime(0,e,o)}return this._voltage.stop(n),n}},onended:{get:function(){return this._voltage.onended},set:function(e){this._voltage.onended=e}}},t=new Float32Array([1,1]);function n(e){var t=e.context.createGain();return e.connect(t),t}function r(e){return Math.log(e+1)/Math.log(100)}return k}function $(){if(U)return P;U=1;var e=K(),t={},n={gain:1,attack:.01,decay:.1,sustain:.9,release:.3,loop:!1,cents:0,loopStart:0,loopEnd:0};function r(e){return"number"==typeof e}var i=["attack","decay","sustain","release"];return P=function(s,a,o){var l=!1,c=0,u={},d=s.createGain();d.gain.value=1;var h=Object.assign({},n,o),p={context:s,out:d,opts:h};return a instanceof AudioBuffer?p.buffer=a:p.buffers=a,p.start=function(n,a,o){if(p.buffer&&null!==n)return p.start(null,n,a);var m=n?p.buffers[n]:p.buffer;if(m&&l){var f=o||t;a=Math.max(s.currentTime,a||0),p.emit("start",a,n,f);var g=function(t,n,a){var o=s.createGain();return o.gain.value=0,o.connect(d),o.env=function(t,n,s){var a=e(t),o=n.adsr||s.adsr;return i.forEach((function(e,t){a[e]=o?o[t]:n[e]||s[e]})),a.value.value=r(n.gain)?n.gain:r(s.gain)?s.gain:1,a}(s,a,h),o.env.connect(o.gain),o.source=s.createBufferSource(),o.source.buffer=n,o.source.connect(o),o.source.loop=a.loop||h.loop,o.source.playbackRate.value=function(e){return e?Math.pow(2,e/1200):1}(a.cents||h.cents),o.source.loopStart=a.loopStart||h.loopStart,o.source.loopEnd=a.loopEnd||h.loopEnd,o.stop=function(e){var n=e||s.currentTime;p.emit("stop",n,t);var r=o.env.stop(n);o.source.stop(r)},o}(n,m,f);return g.id=function(e,t){return t.id=c++,u[t.id]=t,t.source.onended=function(){var e=s.currentTime;t.source.disconnect(),t.env.disconnect(),t.disconnect(),p.emit("ended",e,t.id,t)},t.id}(0,g),g.env.start(a),g.source.start(a),p.emit("started",a,g.id,g),f.duration&&g.stop(a+f.duration),g}},p.play=function(e,t,n){return p.start(e,t,n)},p.stop=function(e,t){var n;return(t=t||Object.keys(u)).map((function(t){return(n=u[t])?(n.stop(e),n.id):null}))},p.connect=function(e){return l=!0,d.connect(e),p},p.emit=function(e,t,n,r){p.onevent&&p.onevent(e,t,n,r);var i=p["on"+e];i&&i(t,n,r)},p}}function W(){if(j)return F;j=1;var e=function(){if(V)return H;V=1;var e=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/,t=[0,2,4,5,7,9,11];function n(n,i,s){if("string"!=typeof n)return null;var a=e.exec(n);if(!a||!i&&a[4])return null;var o={letter:a[1].toUpperCase(),acc:a[2].replace(/x/g,"##")};return o.pc=o.letter+o.acc,o.step=(o.letter.charCodeAt(0)+3)%7,o.alt="b"===o.acc[0]?-o.acc.length:o.acc.length,o.chroma=t[o.step]+o.alt,a[3]&&(o.oct=+a[3],o.midi=o.chroma+12*(o.oct+1),o.freq=r(o.midi,s)),i&&(o.tonicOf=a[4]),o}function r(e,t){return Math.pow(2,(e-69)/12)*(t||440)}var i={parse:n,regex:function(){return e},midiToFreq:r};return["letter","acc","pc","step","alt","chroma","oct","midi","freq"].forEach((function(e){i[e]=function(t){var r=n(t);return r&&void 0!==r[e]?r[e]:null}})),H=i}(),t=function(t){return function(e){return null!==e&&e!==[]&&e>=0&&e<129}(t)?+t:e.midi(t)};return F=function(e){if(e.buffers){var n=e.opts.map,r="function"==typeof n?n:t,i=function(e){return e?r(e)||e:null};e.buffers=function(e,t){return Object.keys(e).reduce((function(n,r){return n[t(r)]=e[r],n}),{})}(e.buffers,i);var s=e.start;e.start=function(e,t,n){var r=i(e),a=r%1;return a&&(r=Math.floor(r),n=Object.assign(n||{},{cents:Math.floor(100*a)})),s(r,t,n)}}return e}}function J(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Q,X,Z,ee,te={exports:{}};function ne(){return Q?te.exports:(Q=1,te.exports=function e(t,n,r){function i(a,o){if(!n[a]){if(!t[a]){if(!o&&J)return J(a);if(s)return s(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,(function(e){var n=t[a][1][e];return i(n||e)}),c,c.exports,e,t,n,r)}return n[a].exports}for(var s=J,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){function t(e){if(this._event=e,this._data=e.data,this.receivedTime=e.receivedTime,!(this._data&&this._data.length<2))switch(this._messageCode=240&e.data[0],this.channel=15&e.data[0],this._messageCode){case 128:this.messageType="noteoff",this.key=127&e.data[1],this.velocity=127&e.data[2];break;case 144:this.messageType="noteon",this.key=127&e.data[1],this.velocity=127&e.data[2];break;case 160:this.messageType="keypressure",this.key=127&e.data[1],this.pressure=127&e.data[2];break;case 176:this.messageType="controlchange",this.controllerNumber=127&e.data[1],this.controllerValue=127&e.data[2],120===this.controllerNumber&&0===this.controllerValue?this.channelModeMessage="allsoundoff":121===this.controllerNumber?this.channelModeMessage="resetallcontrollers":122===this.controllerNumber?0===this.controllerValue?this.channelModeMessage="localcontroloff":this.channelModeMessage="localcontrolon":123===this.controllerNumber&&0===this.controllerValue?this.channelModeMessage="allnotesoff":124===this.controllerNumber&&0===this.controllerValue?this.channelModeMessage="omnimodeoff":125===this.controllerNumber&&0===this.controllerValue?this.channelModeMessage="omnimodeon":126===this.controllerNumber?this.channelModeMessage="monomodeon":127===this.controllerNumber&&(this.channelModeMessage="polymodeon");break;case 192:this.messageType="programchange",this.program=e.data[1];break;case 208:this.messageType="channelpressure",this.pressure=127&e.data[1];break;case 224:this.messageType="pitchbendchange";var t=127&e.data[2],n=127&e.data[1];this.pitchBend=(t<<8)+n}}return new t(e)},t.exports=n.default},{}]},{},[1])(1))}function re(){return ee||(ee=1,function(e){var t=$(),n=(x||(x=1,G=function(e){return e.on=function(t,n){if(1===arguments.length&&"function"==typeof t)return e.on("event",t);var r,i,s="on"+t,a=e[s];return e[s]=a?(r=a,i=n,function(e,t,n,s){r(e,t,n,s),i(e,t,n,s)}):n,e},e}),G),r=W(),i=function(){if(Y)return z;Y=1;var e=Array.isArray,t={};return z=function(n){return n.schedule=function(r,i){var s,a,o,l,c=n.context.currentTime,u=r<c?c:r;return n.emit("schedule",u,i),i.map((function(r){return r?(e(r)?(s=r[0],a=r[1]):(s=r.time,a=r),function(e){return e&&"object"==typeof e}(a)?(o=a.name||a.key||a.note||a.midi||null,l=a):(o=a,l=t),n.start(o,u+(s||0),l)):null}))},n}}(),s=function(){if(Z)return X;Z=1;var e=ne();return X=function(t){return t.listenToMidi=function(n,r){var i={},s=r||{},a=s.gain||function(e){return e/127};return n.onmidimessage=function(n){var r=n.messageType?n:e(n);if("noteon"===r.messageType&&0===r.velocity&&(r.messageType="noteoff"),!s.channel||r.channel===s.channel)switch(r.messageType){case"noteon":i[r.key]=t.play(r.key,0,{gain:a(r.velocity)});break;case"noteoff":i[r.key]&&(i[r.key].stop(),delete i[r.key])}},t},t}}();function a(e,a,o){return s(i(r(n(t(e,a,o)))))}e.exports&&(e.exports=a),"undefined"!=typeof window&&(window.SamplePlayer=a)}(q)),q.exports}function ie(e,t){return Array(t+1).join(e)}function se(e){return"number"==typeof e}function ae(e,t){return Math.pow(2,(e-69)/12)*(t||440)}var oe=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/;var le=[0,2,4,5,7,9,11];function ce(e,t,n){if("string"!=typeof e)return null;var r=oe.exec(e);if(!r||!t&&r[4])return null;var i={letter:r[1].toUpperCase(),acc:r[2].replace(/x/g,"##")};i.pc=i.letter+i.acc,i.step=(i.letter.charCodeAt(0)+3)%7,i.alt="b"===i.acc[0]?-i.acc.length:i.acc.length;var s=le[i.step]+i.alt;return i.chroma=s<0?12+s:s%12,r[3]&&(i.oct=+r[3],i.midi=s+12*(i.oct+1),i.freq=ae(i.midi,n)),t&&(i.tonicOf=r[4]),i}function ue(e){if((se(e)||"string"==typeof e)&&e>=0&&e<128)return+e;var t=ce(e);return t&&function(e){return void 0!==e}(t.midi)?t.midi:null}const de=Object.freeze(Object.defineProperty({__proto__:null,acc:function(e){return(ce(e)||{}).acc},alt:function(e){return(ce(e)||{}).alt},build:function e(t,n,r){return null==t?null:t.step?e(t.step,t.alt,t.oct):t<0||t>6?null:"CDEFGAB".charAt(t)+(se(i=n)?i<0?ie("b",-i):ie("#",i):"")+function(e){return se(e)?""+e:""}(r);var i},chroma:function(e){return(ce(e)||{}).chroma},freq:function(e,t){var n=ue(e);return null===n?null:ae(n,t)},letter:function(e){return(ce(e)||{}).letter},midi:ue,oct:function(e){return(ce(e)||{}).oct},parse:ce,pc:function(e){return(ce(e)||{}).pc},regex:function(){return oe},step:function(e){return(ce(e)||{}).step}},Symbol.toStringTag,{value:"Module"})),he=S(de);var pe,me,fe;const ge=M((fe||(fe=1,function(e){var t=D(),n=re();function r(e){return/\.js(\?.*)?$/i.test(e)}function i(e,t,n){return"https://gleitz.github.io/midi-js-soundfonts/"+(t="FluidR3_GM"===t?t:"MusyngKite")+"/"+e+"-"+(n="ogg"===n?n:"mp3")+".js"}var s=function(){if(me)return pe;me=1;var e=he;function t(e,n){if(!(this instanceof t))return new t(e);this.nameToUrl=n||t.nameToUrl,this.ctx=e,this.instruments={},this.promises=[]}function n(t,n){return n=n||{},function(r,i,s,a){var o=r>0&&r<129?+r:e.midi(r),l=o?e.midiToFreq(o,440):null;if(l){s=s||.2;var c=(a=a||{}).destination||n.destination||t.destination,u=a.vcoType||n.vcoType||"sine",d=a.gain||n.gain||.4,h=t.createOscillator();h.type=u,h.frequency.value=l;var p=t.createGain();return p.gain.value=d,h.connect(p),p.connect(c),h.start(i),s>0&&h.stop(i+s),h}}}return t.prototype.onready=function(e){Promise.all(this.promises).then(e)},t.prototype.instrument=function(e,r){var i=this.ctx;if((e=e||"default")in this.instruments)return this.instruments[e];var s={name:e,play:n(i,r)};if(this.instruments[e]=s,"default"!==e){var a=t.instrument(i,e,r).then((function(e){return s.play=e.play,s}));this.promises.push(a),s.onready=function(e){a.then(e)}}else s.onready=function(e){e()};return s},t.loadBuffers=function(e,n,r){return t.instrument(e,n,r).then((function(e){return e.buffers}))},t.noteToMidi=e.midi,pe=t}();s.instrument=function e(s,a,o){if(1===arguments.length)return function(t,n){return e(s,t,n)};var l=o||{},c=l.isSoundfontURL||r,u=l.nameToUrl||i,d=c(a)?a:u(a,l.soundfont,l.format);return t(s,d,{only:l.only||l.notes}).then((function(e){var t=n(s,e,l).connect(l.destination?l.destination:s.destination);return t.url=d,t.name=a,t}))},s.nameToUrl=i,e.exports&&(e.exports=s),"undefined"!=typeof window&&(window.Soundfont=s)}(O)),O.exports)),be={class:"piano-container"},ye={class:"controls"},Ee={class:"piano-keyboard"},ve=["onMousedown","onMouseup","onMouseleave"],Ne={class:"note-name"};const _e=((e,t)=>{const n=e.__vccOpts||e;for(const[r,i]of t)n[r]=i;return n})({name:"PianoKeyboard",data:()=>({midiEnabled:!1,activeNotes:[],currentInstrument:"acoustic_grand_piano",player:null,pressedKeys:new Set,keyboardMap:{z:48,x:50,c:52,v:53,b:55,n:57,m:59,a:49,s:51,f:54,g:56,h:58,q:60,w:62,e:64,r:65,t:67,y:69,u:71,1:61,2:63,4:66,5:68,6:70,i:72,o:74,p:76,8:73,9:75},notes:[{midi:48,name:"C3",type:"white",position:0},{midi:49,name:"C#3",type:"black",position:35},{midi:50,name:"D3",type:"white",position:50},{midi:51,name:"D#3",type:"black",position:85},{midi:52,name:"E3",type:"white",position:100},{midi:53,name:"F3",type:"white",position:150},{midi:54,name:"F#3",type:"black",position:185},{midi:55,name:"G3",type:"white",position:200},{midi:56,name:"G#3",type:"black",position:235},{midi:57,name:"A3",type:"white",position:250},{midi:58,name:"A#3",type:"black",position:285},{midi:59,name:"B3",type:"white",position:300},{midi:60,name:"C4",type:"white",position:350},{midi:61,name:"C#4",type:"black",position:385},{midi:62,name:"D4",type:"white",position:400},{midi:63,name:"D#4",type:"black",position:435},{midi:64,name:"E4",type:"white",position:450},{midi:65,name:"F4",type:"white",position:500},{midi:66,name:"F#4",type:"black",position:535},{midi:67,name:"G4",type:"white",position:550},{midi:68,name:"G#4",type:"black",position:585},{midi:69,name:"A4",type:"white",position:600},{midi:70,name:"A#4",type:"black",position:635},{midi:71,name:"B4",type:"white",position:650},{midi:72,name:"C5",type:"white",position:700},{midi:73,name:"C#5",type:"black",position:735},{midi:74,name:"D5",type:"white",position:750},{midi:75,name:"D#5",type:"black",position:785},{midi:76,name:"E5",type:"white",position:800},{midi:77,name:"F5",type:"white",position:850},{midi:78,name:"F#5",type:"black",position:885},{midi:79,name:"G5",type:"white",position:900},{midi:80,name:"G#5",type:"black",position:935},{midi:81,name:"A5",type:"white",position:950},{midi:82,name:"A#5",type:"black",position:985},{midi:83,name:"B5",type:"white",position:1e3}]}),mounted(){this.initAudioPlayer(),window.addEventListener("keydown",this.handleKeyDown),window.addEventListener("keyup",this.handleKeyUp)},beforeDestroy(){window.removeEventListener("keydown",this.handleKeyDown),window.removeEventListener("keyup",this.handleKeyUp)},methods:{async initAudioPlayer(){const e=new(window.AudioContext||window.webkitAudioContext);this.player=await ge.instrument(e,this.currentInstrument)},async initMIDI(){try{await w.enable(),this.midiEnabled=!0,w.inputs.forEach((e=>{e.addListener("noteon",(e=>{this.playNote(e.note.number)})),e.addListener("noteoff",(e=>{this.stopNote(e.note.number)}))}))}catch(e){}},playNote(e){this.activeNotes.includes(e)||this.activeNotes.push(e),this.player&&this.player.play(e)},stopNote(e){this.activeNotes=this.activeNotes.filter((t=>t!==e)),this.player&&this.player.stop(e)},handleKeyDown(e){const t=e.key.toLowerCase();!this.pressedKeys.has(t)&&this.keyboardMap[t]&&(this.pressedKeys.add(t),this.playNote(this.keyboardMap[t]))},handleKeyUp(e){const t=e.key.toLowerCase();this.keyboardMap[t]&&(this.pressedKeys.delete(t),this.stopNote(this.keyboardMap[t]))}},watch:{async currentInstrument(e){await this.initAudioPlayer()}}},[["render",function(u,d,h,p,m,f){return t(),e("div",be,[n("div",ye,[n("button",{onClick:d[0]||(d[0]=(...e)=>f.initMIDI&&f.initMIDI(...e))},i(m.midiEnabled?"已连接 MIDI":"连接 MIDI 设备"),1),r(n("select",{"onUpdate:modelValue":d[1]||(d[1]=e=>m.currentInstrument=e)},d[2]||(d[2]=[n("option",{value:"acoustic_grand_piano"},"钢琴",-1),n("option",{value:"acoustic_guitar_nylon"},"吉他",-1),n("option",{value:"orchestral_harp"},"竖琴",-1)]),512),[[s,m.currentInstrument]])]),n("div",Ee,[(t(!0),e(a,null,o(m.notes,(r=>(t(),e("div",{key:r.midi,class:c(["piano-key",r.type,{active:m.activeNotes.includes(r.midi)}]),onMousedown:e=>f.playNote(r.midi),onMouseup:e=>f.stopNote(r.midi),onMouseleave:e=>f.stopNote(r.midi),style:l({left:`${r.position}px`})},[n("span",Ne,i(r.name),1)],46,ve)))),128))])])}],["__scopeId","data-v-006bedbf"]]),we={class:"app"};d({__name:"App",setup:r=>(r,i)=>(t(),e("div",we,[i[0]||(i[0]=n("header",null,[n("h1",null,"在线钢琴"),n("p",null,"使用键盘或 MIDI 设备来演奏")],-1)),n("main",null,[u(_e)]),i[1]||(i[1]=n("footer",null,[n("p",null,"支持 MIDI 设备连接 | 多种乐器音色")],-1))]))}).mount("#app");
